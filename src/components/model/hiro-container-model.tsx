/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF, useScroll } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'

export function HiroContainerModel(props) {
  const { nodes, materials } = useGLTF('/model/hiro-full-container-product.glb')

  const groupRef = useRef(null)
  const topRef = useRef(null)
  const glassRef = useRef(null)
  const productTopRef = useRef(null)
  const productAllRef = useRef(null)
  const recipientRef = useRef(null)

  const scroll = useScroll()

  useFrame(() => {
    if (!groupRef.current || !topRef.current || !productAllRef.current) return

    const offset = scroll.offset
    const currentScale = productAllRef.current.scale.x
    const targetScale = 2
    const firstScale = 1
    const dampingFactor = 0.01
    const fasterDampingFactor = 0.1

    if (offset < 0.04) {
      const baseScale = currentScale + (firstScale - currentScale) * fasterDampingFactor
      productAllRef.current.scale.set(baseScale, baseScale, baseScale)

      groupRef.current.position.x = Math.max(-6, offset * -4)
      groupRef.current.position.z = Math.min(offset * 20, 2)
      groupRef.current.rotation.z = Math.max(-1, offset * -7)
    } else {
      const newScale = currentScale + (targetScale - currentScale) * dampingFactor
      productAllRef.current.scale.set(newScale, newScale, newScale)

      topRef.current.position.y = Math.min(offset * 24, offset * 35)
      recipientRef.current.position.y = -offset * 10
    }

    if (offset > 0.25) {
      topRef.current.visible = false
      recipientRef.current.visible = false
      productAllRef.current.rotation.z = offset * 0.2
      productAllRef.current.rotation.y = offset * 0.5
      productAllRef.current.position.x = offset * -0.2
    } else {
      topRef.current.visible = true
      recipientRef.current.visible = true
    }
  })

  return (
    <group {...props} ref={groupRef} dispose={null}>
      <mesh
        ref={topRef}
        castShadow
        receiveShadow
        geometry={nodes['Top-bottle'].geometry}
        material={materials['top-bottle-color']}
        position={[0.332, 1.4, 0]}
      />
      <group ref={recipientRef}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes['Bottom-bottle'].geometry}
          material={materials['bottom-bottle-color']}
          position={[0.333, 0.197, 0]}
        />

        <mesh
          ref={glassRef}
          castShadow
          receiveShadow
          geometry={nodes.Cylinder.geometry}
          material={materials['Material.001']}
          position={[0.332, 0.844, 0]}
        />
      </group>
      <group ref={productAllRef}>
        <group ref={productTopRef} position={[0.34, 0.827, 0.009]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cylinder003.geometry}
            material={materials['cylinder-top-color']}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cylinder003_1.geometry}
            material={materials['cylinder-top-surface-top']}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinderbottom001.geometry}
          material={materials['cylinder-bottom-color.001']}
          position={[0.34, 0.548, 0.007]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Text001.geometry}
          material={nodes.Text001.material}
          position={[0.332, 0.824, 0.176]}
          rotation={[1.573, 0, 0]}
          scale={0.087}
        />
      </group>
    </group>
  )
}

useGLTF.preload('/model/hiro-full-container-product.glb')
